Next up is Validation. We learned how to apply our own validation rules to specific variables or inputs and then also learned how to tell Thymeleaf/Spring to enforce these rules. The first way we did this was to enforce a rule that last name must have at least one character (and not be null). We threw a basic CSS class at the top of our HTML file in the header (very convenient) to give the error text a red color and bold flavor, as is tradition. 

Using @InitBinder, we also pre-processed every string form data to remove leading and trailing whitespace. Additionally, if the string is only whitespace, we trim it down to null. This acts as validation to prevent entries that are only whitespace, as well as removing leading and trailing whitespaces. We also added validation for number ranges using @Min and @Max. We then added validation for regular expressions to a zip code. Regular expressions are a new concept to me and I did not fully understand where the regular expression itself came from, but this is something I will have to explore further at another time. 

Finally, we created our own custom validation rules by defining a custom validation class and referencing it using a custom annotation within our Customer class.  The custom validation ensured that the proper “course code” was being used to prefix the given input. The steps for this were somewhat complex and I recorded them in my notes, but this is clearly a very useful feature so I wanted to make sure I had thorough documentation on how to implement it. 
